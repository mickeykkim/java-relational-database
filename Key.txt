Adding keys to records was an interesting challenge. At first, I thought that perhaps the Record class should be responsible for its own key. But the requirement that keys be unique to a table suggested that the key values should instead be handled by the Table class. I thought then that perhaps I should create a list of keys, but then how should the keys and the records be linked? Perhaps, instead, I could use a Linked Hash Map, with hash keys being record keys and hash values being records themselves. I could then have the keys be specified by the user, with the Table class handling validation. Unfortunately, hash maps don't extend collections, so the generic functions such as add() broke. Also, if Records are identified via keys instead of index, inserting records doesn't seem to make sense (and also not possible using a Linked Hash Map).

Just how the keys should be specified was another challenge. It didn't seem very elegant for the user to have to specify what the key should be every time they want to add or update a record. In MariaDB, tables are first created with attributes and then populated with records that adhere to those attributes. I thought then that the columns in a table could hold data about the table's attributes, including which column holds the record keys. Thus, I decided to create a new class called ColumnID.java which would just have some basic information about what the column name is and whether or not it contains keys. I also considered the possibility of adding attribute types later, which would fit nicely somewhere in this class.

Currently, ColumnID.java is as follows:

class ColumnID {
   private String name;
   private boolean containsKeys;

   ColumnID() {
   }

   ColumnID(String name) {
      this.name = name;
      this.containsKeys = false;
   }

   ColumnID(String name, boolean containsKeys) {
      this.name = name;
      this.containsKeys = containsKeys;
   }

   String getName() {
      return this.name;
   }

   void setName(String name) {
      this.name = name;
   }

   boolean containsKeys() {
      boolean status = this.containsKeys;
      return status;
   }

   void setKeyStatus(boolean status) {
      this.containsKeys = status;
   }

   // --- testing ---

   void testColumnCreation() {
      String testStr = "test";
      String newTest = "testkey";
      ColumnID test0 = new ColumnID(testStr);
      assert(test0.getName().equals(testStr));
      assert(test0.containsKeys() == false);
      ColumnID test1 = new ColumnID(newTest, true);
      assert(test1.getName().equals(newTest));
      assert(test1.containsKeys() == true);
      test1.setKeyStatus(false);
      assert(test1.containsKeys() == false);
   }

   void runTests() {
      testColumnCreation();
   }

   public static void main(String[] args) {
      ColumnID program = new ColumnID();
      program.runTests();
   }
}

After refactoring, Table.java currently looks like this:

import java.util.ArrayList;
import java.util.List;
import java.util.LinkedHashMap;
import java.io.*;

class Table {
   private String name;
   private List<ColumnID> columns;
   private LinkedHashMap<String,Record> records;
   private int keyColumn = -1;

   private static final String noSuchRecord = "No such record exists in table.";
   private static final String noSuchColumn = "No such column exists in table.";
   private static final String duplicateKey = "Duplicate key exists in table.";
   private static final String noKeySpecified = "No key specified in table.";

   Table() {
      this.name = "untitled";
      this.columns = new ArrayList<ColumnID>();
      this.records = new LinkedHashMap<String,Record>();
   }

   Table(String name) {
      this.name = name;
      this.columns = new ArrayList<ColumnID>();
      this.records = new LinkedHashMap<String,Record>();
   }

   Table(String name, ColumnID... columns) {
      this.name = name;
      this.columns = new ArrayList<ColumnID>();
      this.records = new LinkedHashMap<String,Record>();
      setColumnIDs(columns);
   }

   void setColumnIDs(ColumnID... columns) {
      checkIfUniqueKeyColumnExists(columns);
      for (ColumnID entry : columns) {
         this.columns.add(entry);
      }
   }

   int getColumnSize() {
      return this.columns.size();
   }

   int getRecordSize() {
      return this.records.size();
   }

   String getColumnName(int idx) {
      checkIfColumnExists(idx);
      return this.columns.get(idx).getName();
   }

   String getName() {
      return this.name;
   }

   void setName(String name) {
      this.name = name;
   }

   Record select(String key) {
      checkIfRecordExists(key);
      return this.records.get(key);
   }

   void add(Record data) {
      String key = data.getField(this.keyColumn);
      checkIfRecordsMatchColumns(data);
      checkIfDuplicateKey(key);
      this.records.put(key, data);
   }

   //TO DO: check if trying to update key but key already exists
   void update(String key, int idx, String input) {
      checkIfRecordExists(key);
      select(key).setField(idx, input);
   }

   void delete(String key) {
      checkIfRecordExists(key);
      this.records.remove(key);
   }

   // --- helper methods ---

   private void checkIfUniqueKeyColumnExists(ColumnID... values) {
      int colCnt = 0;
      this.columns.clear();
      for (ColumnID entry : values) {
         if (entry.containsKeys() == true && this.keyColumn == -1) {
            this.keyColumn = colCnt;
         } else if (entry.containsKeys() == true && this.keyColumn != -1) {
            this.columns.clear();
            System.out.println(duplicateKey);
            throw new IllegalArgumentException(); 
         }
         colCnt++;
      }
      checkIfKeyColumnExists();
   }

   private void checkIfKeyColumnExists() {
      if (this.keyColumn == -1) {
         this.columns.clear();
         System.out.println(noKeySpecified);
         throw new IllegalArgumentException(); 
      }
   }

   private void checkIfColumnExists(int idx) {
      if (idx >= this.columns.size() || idx < 0) {
         System.out.println(noSuchColumn);
         throw new IndexOutOfBoundsException();
      }
   }

   private void checkIfRecordExists(String key) {
      if (!this.records.containsKey(key)) {
         System.out.println(noSuchRecord);
         throw new IllegalArgumentException();
      }
   }

   private void checkIfDuplicateKey(String key) {
      if (this.records.containsKey(key)) {
         System.out.println(duplicateKey);
         throw new IllegalArgumentException();
      }
   }

   private void checkIfRecordsMatchColumns(Record data) {
      if (data.size() != this.columns.size()) {
         System.out.println("Input data does not match table columns.");
         throw new IllegalArgumentException();
      }
   }

   List<String> getKeyList(){
      ArrayList<String> keys = new ArrayList<>(records.keySet());
      return keys;
   }

   int getKeyColumn() {
      int keyColumn = this.keyColumn;
      return keyColumn;
   }

   // --- testing ---

   private void testTableCreation() {
      //redirect System.out
      ByteArrayOutputStream baos = new ByteArrayOutputStream();
      PrintStream out = new PrintStream(baos);
      PrintStream console = System.out;
      System.setOut(out);
      //Begin tests
      Table test = new Table();
      assert(test.getName().equals("untitled"));
      String testName = "test";
      test.setName(testName);
      assert(test.getName().equals(testName));
      Table test0 = new Table(testName);
      assert(test0.getName().equals(testName));
      //checking column validity
      test0.setColumnIDs(
         new ColumnID("key", true), 
         new ColumnID("2", false), 
         new ColumnID("3"), 
         new ColumnID("4")
      );
      assert(test0.getColumnName(0).equals("key"));
      assert(test0.getColumnName(1).equals("2"));
      assert(test0.getColumnName(2).equals("3"));
      assert(test0.getColumnName(3).equals("4"));
      Table test1 = new Table(
         "title", 
         new ColumnID("X", true), 
         new ColumnID("Y", false), 
         new ColumnID("Z")
      );
      assert(test1.getColumnName(0).equals("X"));
      assert(test1.getColumnName(1).equals("Y"));
      assert(test1.getColumnName(2).equals("Z"));
      //reset System.out
      System.out.flush();
      System.setOut(console);
   }

   private void testTableManipulation() {
      //redirect System.out
      ByteArrayOutputStream baos = new ByteArrayOutputStream();
      PrintStream out = new PrintStream(baos);
      PrintStream console = System.out;
      System.setOut(out);
      //Begin tests
      //checking add records
      Table test1 = new Table();
      test1.setColumnIDs(
         new ColumnID("key", true), 
         new ColumnID("2", false), 
         new ColumnID("3"), 
         new ColumnID("4")
      );
      Record testR1 = new Record("key1", "b", "c", "d");
      test1.add(testR1);
      assert(test1.select("key1").getField(0).equals("key1"));
      assert(test1.select("key1").getField(1).equals("b"));
      assert(test1.select("key1").getField(2).equals("c"));
      assert(test1.select("key1").getField(3).equals("d"));
      Record testR2 = new Record("a", "b", "c");
      boolean caught = false;
      try { test1.add(testR2); } 
      catch (IllegalArgumentException e) { caught = true; }
      assert(caught == true);
      caught = false;
      //checking delete records
      test1.delete("key1");
      Record testR3 = new Record("key2", "w", "e", "r");
      test1.add(testR3);
      assert(test1.select("key2").getField(0).equals("key2"));
      assert(test1.select("key2").getField(1).equals("w"));
      assert(test1.select("key2").getField(2).equals("e"));
      assert(test1.select("key2").getField(3).equals("r"));
      test1.delete("key2");
      try { test1.delete("key2"); }
      catch (IllegalArgumentException e) { caught = true; }
      assert(caught == true);
      caught = false;
      //checking update records
      test1.add(testR1);
      test1.update("key1", 0, "x");
      assert(test1.select("key1").getField(0).equals("x"));
      try { test1.update("b", 0, "x"); }
      catch (IllegalArgumentException e) { caught = true; }
      assert(caught == true);
      caught = false;
      try { test1.update("key1", 4, "x"); }
      catch (IndexOutOfBoundsException e) { caught = true; }
      assert(caught == true);
      caught = false;
      //reset System.out
      System.out.flush();
      System.setOut(console);
   }

   void runTests() {
      testTableCreation();
      testTableManipulation();
   }

   public static void main(String[] args) {
      Table program = new Table();
      program.runTests();
   }
}

I also had to refactor File.java to incorporate keys. For saving keys, I decided to put an asterisk in front of the column name that held the record keys. Likewise, I converted the files to tables using that asterisk to denote key columns.

After refactoring, File.java currently looks like this:

import java.util.List;
import java.io.*;

class File {
   private static final String UNITDELIM = "\t";
   private static final String RCRDDELIM = "\n";
   private static final String KEYATTRIB = "*";
   private static final String EXTENSION = ".mdb";

   private String filename;
   private String filepath;
   private String dirpath;
   private int lineCnt = 0;

   File() {
      this.filename = "untitled" + EXTENSION;
      this.filepath = "/databases/" + this.filename;
      this.dirpath = "/databases/";
   }

   File(String file) {
      this.filename = file + EXTENSION;
      this.filepath = "/databases/" + this.filename;
      this.dirpath = "/databases/";
   }

   File(String folder, String file) {
      if (!folder.endsWith("/")) {
         folder = folder + "/";
      }
      this.filename = file + EXTENSION;
      this.filepath = folder + this.filename;
      this.dirpath = folder;
   }

   String getName() {
      return this.filename;
   }

   String writeTableToString(Table table) {
      StringBuilder output = new StringBuilder();
      output.append(table.getName() + RCRDDELIM);
      writeColumns(table, output);
      writeRecords(table, output);
      return output.toString();
   }

   void writeColumns(Table table, StringBuilder output) {
      int colsz = table.getColumnSize();
      int keyColumn = table.getKeyColumn();
      for (int i = 0; i < colsz; i++) {
         if (i == keyColumn) {
               output.append(KEYATTRIB);
         }
         output.append(table.getColumnName(i));
         if (i < colsz - 1) {
            output.append(UNITDELIM);
         }
      }
      output.append(RCRDDELIM);
   }

   void writeRecords(Table table, StringBuilder output) {
      int colsz = table.getColumnSize();
      List<String> recordKeys = table.getKeyList();
      for (String entry : recordKeys) {
         for (int i = 0; i < colsz; i++) {
            output.append(table.select(entry).getField(i));
            if (i < colsz - 1) {
               output.append(UNITDELIM);
            }
         }
         output.append(RCRDDELIM);
      }
   }

   void writeStringToFile(String input) {
      try (PrintStream ps = new PrintStream(this.filename)) { 
         ps.print(input); 
      } catch (Exception e) {
         System.out.println(e.getMessage());
      }
   }

   Table readFileToTable(String filepath) throws Exception {
      BufferedReader bReader = new BufferedReader(new FileReader(filepath));
      String line;
      String tableName = new String();
      Table outputTable = new Table();
      this.lineCnt = 0;
      while ((line = bReader.readLine()) != null) {
         if (this.lineCnt == 0) {
            tableName = line;
         } else if (this.lineCnt == 1) {
            outputTable = readColumnsToTable(outputTable, line, tableName);
         } else {
            readRecords(outputTable, line);
         }
         this.lineCnt++;
      }
      bReader.close();
      return outputTable;
   }

   Table readColumnsToTable(Table outputTable, String line, String tableName) {
      String[] headers = line.split(UNITDELIM);
      ColumnID[] columns = new ColumnID[headers.length];
      for (int i = 0; i < headers.length; i++) {
         if (headers[i].startsWith("*")) {
            columns[i] = new ColumnID(headers[i].replace(KEYATTRIB, ""), true);
         } else {
            columns[i] = new ColumnID(headers[i], false);
         }
      }
      return new Table(tableName, columns);
   }

   void readRecords(Table outputTable, String line) {
      Record newRecord = new Record();
      String[] fields = line.split(UNITDELIM);
      for (String entry : fields) {
         newRecord.add(entry);
      }
      outputTable.add(newRecord);
   }

   // --- testing ---

   private void testFileCreation() {
      // make file objects
      File test0 = new File();
      assert(test0.getName().equals("untitled" + EXTENSION));
      String testStr = "test";
      File testFile = new File(testStr);
      assert(testFile.getName().equals(testStr + EXTENSION));
      // make tables
      Table testTable = new Table(testStr);
      testTable.setColumnIDs(
         new ColumnID("1", true), 
         new ColumnID("2", false), 
         new ColumnID("3")
      );
      Record testR1 = new Record("a", "b", "c");
      testTable.add(testR1);
      Record testR2 = new Record("x", "y", "z");
      testTable.add(testR2);
      String testOutputStr = testFile.writeTableToString(testTable);
      assert(testOutputStr.equals(
         testStr + RCRDDELIM +
         KEYATTRIB + "1" + UNITDELIM + "2" + UNITDELIM + "3" + RCRDDELIM +
         "a" + UNITDELIM + "b" + UNITDELIM + "c" + RCRDDELIM +
         "x" + UNITDELIM + "y" + UNITDELIM + "z" + RCRDDELIM
      ));
      testFile.writeStringToFile(testOutputStr);
   }

   private void testFileParsing() {
      String testStr = "test";
      File testFile = new File(testStr);
      Table testOut = new Table();
      boolean caught = false;
      try { testOut = testFile.readFileToTable(testStr + EXTENSION); }
      catch (Exception e) { caught = true; }
      assert(caught == false);
      assert(testFile.getName().equals(testStr + EXTENSION));
      String testInputFile = testFile.writeTableToString(testOut);
      assert(testInputFile.equals(
         testStr + RCRDDELIM +
         KEYATTRIB + "1" + UNITDELIM + "2" + UNITDELIM + "3" + RCRDDELIM +
         "a" + UNITDELIM + "b" + UNITDELIM + "c" + RCRDDELIM +
         "x" + UNITDELIM + "y" + UNITDELIM + "z" + RCRDDELIM
      ));
   }

   void runTests() {
      testFileCreation();
      testFileParsing();
   }

   public static void main(String[] args) {
      File program = new File();
      program.runTests();
   }
}
